// Web MVC Framework

class Engine {
	member file   = new File();
	member engine = require("ejs");
	member folder = "./views/";

	method render(name, data) {
		var html = this.file.read(this.folder + name);
		return this.engine.render(html, data);
	}
}

class App {
	member port    = 2000;
	member address = "127.0.0.1";
	member http    = require('http');
	member system  = new System();
	member folder  = "./public"
	member file    = new File();

	// TODO: Add more preprocessor file, e.g. sass, scss ...
	method compile() {
		var less  = require('less');
		var files = this.file.list(this.folder);
		for (var i = 0; i < files.length; i++) {
			if (files[i].match(/\.less$/)) {
				var path   = this.folder + "/" + files[i];
				var file   = this.file;
				var source = file.read(path);
				less.render(source, (function(file, path) {
					return function(error, result) {
						var css = path.replace(".less", ".css");
						if (error) {
							file.write(css, "");
						} else {
							file.write(css, result.css);
						}
					}
				})(file, path));
			}
		}
	}

	method run(handler) {
		this.compile();
		handler.folder = this.folder;
		handler.file   = this.file;
		handler.system = this.system;

		var server = this.http.createServer(function (request, response) {
			var urlTokens = request.url.split("/");
			var callee = urlTokens[1];
			if (callee == "")
				callee = "index";
			var path = handler.folder + request.url;

			if (handler.file.exists(path) && callee != "index") {
				response.statusCode = 200;
				// TODO: set MIME type for static file here
				response.end(handler.file.read(path));
			} else {
				if (handler[callee] == null) {
					response.statusCode = 404;
					if (handler['error'] == null) {
						response.end();
					} else {
						handler['error']({request:request, response:response});
					}
				} else {
					response.statusCode = 200;
					response.setHeader("Content-Type", "text/html");
					handler[callee]({request:request, response:response});
				}
			}
		});

		server.listen(this.port, this.address);
		this.system.log("Running at http://" + this.address + ":" + this.port);
	}
}
