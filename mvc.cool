// Web MVC Framework

class Engine {
	member file   = new File();
	member engine = require("ejs");
	member folder = "./views/";
	member header = "";
	member footer = "";

	method render(name, data) {
		var html = "";
		if (this.header != "")
			html += this.file.read(this.folder + this.header);
		html += this.file.read(this.folder + name);
		if (this.footer != "")
			html += this.file.read(this.folder + this.footer);

		return this.engine.render(html, data);
	}

	method setHeader(name) {
		this.header = name;
	}
	method setFooter(name) {
		this.footer = name;
	}
}

class App {
	member port    = 2000;
	member address = "127.0.0.1";
	member http    = require('http');
	member system  = new System();
	member folder  = "./public"
	member file    = new File();
	member less    = require('less');

	member mime = [];

	constructor {
		this.mime["js"  ] = { text: true , type: "text/javascript"  };
		this.mime["css" ] = { text: true , type: "text/css"         };
		this.mime["cool"] = { text: true , type: "text/cool"        };
		this.mime["txt" ] = { text: true , type: "text/plain"       };
		this.mime["map" ] = { text: true , type: "text/plain"       };
		this.mime["json"] = { text: true , type: "application/json" };
		this.mime["xml" ] = { text: true , type: "application/xml"  };
	}

	method run(handler) {
		this.compile();
		handler.folder = this.folder;
		handler.file   = this.file;
		handler.system = this.system;
		handler.mime   = this.mime;
		handler.less   = this.less;

		var server = this.http.createServer(function (request, response) {
			var urlTokens = request.url.split("/");
			var callee = urlTokens[1];
			if (callee == "")
				callee = "index";
			var path = handler.folder + request.url;
			var pathTokens = path.split(".");
			var fileType   = pathTokens[pathTokens.length-1];

			if (handler.file.exists(path) && callee != "index") {
				var data = "";


				if (fileType == "css") { // recompile
					var oldFile = path;
					oldFile = oldFile.replace(/\.css$/g, ".less");
					var oldData = handler.file.read(oldFile);

					if (oldData == "") {
						data = handler.file.read(path);
						response.statusCode = 200;
						response.setHeader("Content-Type", "text/css");
						response.end(data);
					} else {
						handler.less.render(oldData, function(error, css) {
							if (error) data = ""; else data = css.css;
							handler.file.write(path, data);
							response.statusCode = 200;
							response.setHeader("Content-Type", "text/css");
							response.end(data);
						});
					}
				} else {
					data = handler.file.read(path);
					if (data == "") {
						response.statusCode = 404;
						response.end();
					} else {
						var mime   = handler.mime[fileType] == null ?
										"application/octet-stream" :
										handler.mime[fileType].type;
						var isText = handler.mime[fileType] == null ?
										false :
										handler.mime[fileType].text;

						response.statusCode = 200;
						response.setHeader("Content-Type", mime);
						if (!isText)
							data = handler.file.readBinary();
						response.end(data);
					}
				}
			} else {
				if (handler[callee] == null) {
					response.statusCode = 404;
					if (handler['error'] == null) {
						response.end();
					} else {
						handler['error']({request:request, response:response});
					}
				} else {
					response.statusCode = 200;
					response.setHeader("Content-Type", "text/html");
					handler[callee]({request:request, response:response});
				}
			}
		});

		server.listen(this.port, this.address);
		this.system.log("Running at http://" + this.address + ":" + this.port);
	}


	method compile() {}
	// TODO: Add more preprocessor file, e.g. sass, scss ...
	/*
	method compile() {
		var less  = require('less');
		var files = this.file.list(this.folder);
		for (var i = 0; i < files.length; i++) {
			if (files[i].match(/\.less$/)) {
				var path   = this.folder + "/" + files[i];
				var file   = this.file;
				var source = file.read(path);
				less.render(source, (function(file, path) {
					return function(error, result) {
						var css = path.replace(".less", ".css");
						if (error) {
							file.write(css, "");
						} else {
							file.write(css, result.css);
						}
					}
				})(file, path));
			}
		}
	}
	*/
}





/*
this.mime["ttf" ] = { text: false, type: "application/x-font-ttf" };
this.mime["eot" ] = { text: false, type: "application/vnd.ms-fontobject"};
this.mime["svg" ] = { text: false, type: "image/svg+xml" };
this.mime["woff"] = { text: false, type: "application/font-woff" };
this.mime["woff2"]= { text: false, type: "application/font-woff2" };
*/
