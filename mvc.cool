// Web MVC Framework

class Database(connection) extends Root {
	member connection = "";
	new {
		this.connection = connection;
	}

	member mysql = require("mysql");
	member pool  = this.mysql.createPool(this.connection);

	method execute(sql, data, callback) {
		this.pool.getConnection(function(error, server) {
			if (error) {
				callback([]);
			} else {
				server.query(sql, data, function(error, data) {
					callback(data);
					server.release();
				});
			}
		});
	}
}

class View extends Root {
	member fs     = require("fs");
	member engine = require("ejs");
	member folder = "./views/";
	member header = "";
	member footer = "";

	method render(name, data) {
		var engine = this.engine;
		var header = "";
		var footer = "";
		var center = "";
		try { header = this.fs.readFileSync(this.folder + this.header); }
		catch (e) {}
		try { footer = this.fs.readFileSync(this.folder + this.footer); }
		catch (e) {}
		try { center = this.fs.readFileSync(this.folder + name);        }
		catch (e) { center = ""; }
		var html = header + center + footer;

		// TODO: add caching here for production server
		return engine.render(html, data);
	}
}

class Server(controller) extends Root {
	member port    = 2000;
	member address = "0.0.0.0";
	member http    = require("http");
	member folder  = "./public"
	member storage = require("fs");

	new {
		this.controller = controller;
	}

	member middleware = [];

	method start() {
		var controller = this.controller;
		var server     = this;

		var http = this.http.createServer(function (request, response) {
			var context = {request:request, response:response, server:server};

			for (var i = 0; i < server.middleware.length; i++) {
				if (typeof server.middleware[i].request == "function") {
					server.middleware[i].request(context);
				}
			}

			var tokens = request.url.split(/\/|\?/g);
			var callee = tokens[1];
			if (callee == "") callee = "index";

			if (server.exception.indexOf(callee) >= 0) {
				response.statusCode = 404;
				response.setHeader("Content-Type", "text/html");
				controller.error(context);
			} else if (typeof controller[callee] == "function") {
				response.statusCode = 200;
				response.setHeader("Content-Type", "text/html");
				controller[callee](context);
			} else {
				// TODO: check existing here then send(file) or 404
				server.send(context);
			}
		});

		http.listen(this.port, this.address);
	}

	method send(context) {
		var response   = context.response;
		var request    = context.request;
		var server     = this;
		var controller = this.controller;

		var urlTokens  = request.url.split("/");
		var path       = server.folder + request.url;
		var pathTokens = path.split(".");
		var fileType   = pathTokens[pathTokens.length-1];

		server.storage.readFile(path, function(error, data) {
			if (error) {
				response.statusCode = 404;
				response.setHeader("Content-Type", "text/html");
				controller.error(context);
			} else {
				var mime   = server.mime[fileType] == null ?
								"application/octet-stream" :
								server.mime[fileType].type;
				var isText = server.mime[fileType] == null ?
								false :
								server.mime[fileType].text;

				response.statusCode = 200;
				response.setHeader("Content-Type", mime);

				if (isText) {
					server.storage.readFile(path, {encoding:"utf8"},
					function(error, data) {
						response.end(data);
					});
				} else {
					response.end(data);
				}
			}
		});
	}

	method text() {
		return "Running at http://" + this.address + ":" + this.port;
	}

	member exception = [
		"__defineGetter__",
		"__defineSetter__",
		"__lookupGetter__",
		"__lookupSetter__",
		"constructor",
		"hasOwnProperty",
		"isPrototypeOf",
		"propertyIsEnumerable",
		"toLocaleString",
		"toString",
		"valueOf"
	];

	member mime = {
		"html" : { text: true , type: "text/html"  },
		"js"   : { text: true , type: "text/javascript"  },
		"css"  : { text: true , type: "text/css"         },
		"cool" : { text: true , type: "text/cool"        },
		"txt"  : { text: true , type: "text/plain"       },
		"map"  : { text: true , type: "text/plain"       },
		"json" : { text: true , type: "application/json" },
		"xml"  : { text: true , type: "application/xml"  },
	};
}

class Controller extends Root {
	method index(context) {context.response.end(); }
	method error(context) {context.response.end(); }
}

class Middleware extends Root {
	method request(context) {
	}
}

class Logger extends Middleware {
	method request(context) {
		var system = new System();
		system.write(context.request.url);
	}
}

class Less extends Middleware {
	member less = require('less');

	method request(context) {
		var urlTokens  = context.request.url.split("/");
		var path       = context.server.folder + context.request.url;
		var pathTokens = path.split(".");
		var fileType   = pathTokens[pathTokens.length-1];
		var less       = this.less;
		if (fileType == "css") {
			var old = path.replace(/\.css$/g, ".less");
			context.server.storage.readFile(old, {encoding:"utf8"},
			function(error, data) {
				if (!error) {
					less.render(data, function(error, css) {
						if (!error) {
							context.server.storage.writeFile(path, css.css);
						}
					});
				}
			});
		}
	}
}

// TODO: On production server, .html, .js, .css must be minified
// or create minified middleware
