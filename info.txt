-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

/*
Standard
9 Classes:
Root, Exception, System, Engine, Web, File, TextFile [Integer, Float = Number]
11 Methods
text, read, write, append, execute, select, list, get, post, parse

MVC
4 Classes
Database View Controller Server
4 Methods
render index error start (execute)

Additional
DateTime

*/

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
var web = new Web();
web.post("/test", {data:'data', info:'info'}, function(data) {
  var system = new System();
  system.write(data);

});

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

JavaScript Built-in method
__defineGetter__
__defineSetter__
__lookupGetter__
__lookupSetter__
constructor
hasOwnProperty
isPrototypeOf
propertyIsEnumerable
toLocaleString
toString
valueOf


JavaScript Type

number
boolean
function
string
object (new, null)
undefined


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
Browser MVC

class PageView extends Root {

}


main class PageController extends Root {
    // ("#id").value
    member name;
    // ("#button").onclick
    method onclick () {

    }

    // ("body").onscroll
    method onscroll () {

    }

    new {

    }
}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

Cool! Ideas
SAP - Simple And Powerful       -> Only 20-30 methods, but produce same result as large framework.
TOI - Text editor Over IDE      -> You can use any text editor to write Cool!
LIS - Life Is Short             -> Don't spend 10000 hours learn how to code.
BAS - Browser And Server        -> Cool! can use on browser and server.
LOC - Learn Online Conveniently -> No installation required. Cool! has online editor.

A minimal language with memorable framework.
You don't need any IDE to write a Cool! app.
All you need is text editor.

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

Multiple Inheritance are good for some interface like Comparable




All Cool! programs start with constructor of any main class.



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

class(\s+)(\w+)([\s\S]*)static(\s*)(\w+)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
Lexeme

alpha numeric _ = == === != !==  + - * / & ^ ! | % $ && || \ " ' : ;
() [] {} space, tab, cr, nl


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
Tokens

reserved_word   for while do function var if switch case break this
                class method member

identifier      name name_2 $name
literal         1 0.5 "data"
end_statement    :- ; \n \r



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
Syntax

class identifier block
class identifier parameter_list block
block :- {[[statement]endStatement]*}

string_literal           "{} // /* */ \" " also inside singleQuote
single_line_comment      // ... \n
multiple_line_comment    /* ... */


statement ::= assignment | conditional | iterative |
    function_declaration | variable_declaration |
    method_declaration | member_declaration;

assigment
    ::= identifer = expression

variable_declartion
    ::= var identifier


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --















































-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
