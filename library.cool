// Standard Library

class Root {
	member class = "Root";
	member toString() {
		return this.class;
	}
}

class Exception extends Root {
	member class = "Exception";
}

class System extends Root {
	member class = "System";

	/*
	member execute(code) {
		eval(code);
	}
	member exit() {
		process.exit();
	}
	member parse(data) {
		return JSON.parse(data);
	}
	member stringify(data) {
		return JSON.stringify(data);
	}
	member write(data) {
		console.log(data);
	}
	*/
}

class Integer extends Root {
	member class = "Integer";
	member parse(n) { return parseInt(n); }
}

class Float extends Root {
	member class = "Float";
	member parse(f) { return parseFloat(f); }
}

class File extends Root {
	member class = "File";

	member fs = require("fs");
	member read(name) {
		var result = "";
		try {
			result = this.fs.readFileSync(name, {encoding: "utf8"});
		} catch (e) { throw new Exception(); }
		return result;
	}
	member write(name, data) {
		this.fs.writeFileSync(name, data);
	}
	member append(name, data) {
		this.fs.appendFileSync(name, data);
	}

	/*
	member exists(name) {
		return this.fs.existsSync(name);
	}
	member list(name) {
		return this.fs.readdirSync(name);
	}
	member isDirectory(name) {
		var info = this.fs.statsSync(name);
		return info.isDirectory();
	}
	*/
}

class Web extends Root {
	member class = "Web";

	member select(x) {
		return [];
	}
	member get(url, data, callback) {
		callback();
	}
	member post(url, data, callback) {
		callback();
	}
}

class Console extends Root {
	new {
		process.stdin.resume();
		process.stdin.setEncoding("UTF8");
	}
	member data = "";
	member write(data) {
		process.stdout.write(data);
	}
	member read(callback) {
		process.stdin.on("data", function (chunk) { this.data += chunk; });
		process.stdin.on("end", function() { callback(this.data); });
	}
	member index = 0;
	member readLine() {
		process.stdin.pause();
		var lines = this.data.split("\n");
		process.stdin.resume();
		// return lines[this.index++];
	}
}

/*
class File(name) extends Root {
	new {
		this.name = name;
	}
	member read();
	member write(data);
}

class TextFile(name) extends File(name) {
	new {
		this.name = name;
	}
	member read();
	member write(data);
	member append(data);
}

*/
