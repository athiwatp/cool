// Standard Library

class Root {
	member class = "Root";
	method toString() {
		return this.class;
	}
}

class Exception extends Root {
	this.class = "Exception";
}

class System extends Root {
	this.class = "System";

	method log(data) {
		console.log(data);
	}
	method execute(code) {
		eval(code);
	}
	method exit() {
		process.exit();
	}
	method parse(data) {
		return JSON.parse(data);
	}
	method stringify(data) {
		return JSON.stringify(data);
	}
}

class Integer extends Root {
	this.class = "Integer";
	method parse(n) { return parseInt(n); }
}

class Float extends Root {
	this.class = "Float";
	method parse(f) { return parseFloat(f); }
}

class File extends Root {
	this.class = "File";

	member fs = require("fs");
	method read(name) {
		var result = "";
		try {
			result = this.fs.readFileSync(name, {encoding: "utf8"});
		} catch (e) { throw new Exception(); }
		return result;
	}
	method write(name, data) {
		this.fs.writeFileSync(name, data);
	}
	method append(name, data) {
		this.fs.appendFileSync(name, data);
	}
	/*
	method exists(name) {
		return this.fs.existsSync(name);
	}
	method list(name) {
		return this.fs.readdirSync(name);
	}
	method isDirectory(name) {
		var info = this.fs.statsSync(name);
		return info.isDirectory();
	}
	*/
}

class Web extends Root {
	this.class = "Web";

	method select(x) {
		return [];
	}
	method get(url, data, callback) {
		callback();
	}
	method post(url, data, callback) {
		callback();
	}
}
