// Demo of Inheritance and Polymorphism
/*
class T extends U, V, W {

}
*/

class A {
	console.log('name is ' + this.name);

	member system = new System();
	member aaa() { this.system.log("A.aaa()"); this.system.log(this.__proto__); }

	// static xxx() {
	// this.xxx = function() { return "A.xxx()-" + a.name; }
}

A.xxx = function() { return "A.xxx() " + this.__proto__; }

/*
static A.xyz() { }   -> A.xyz = function { }
*/

// method A.abc() {}
A.abc = function() {
	var system = new System();
	system.log("A.abc()");
}

class B {
	member system = new System();
	member bbb() { this.system.log("B.bbb()"); }
}

class A2 extends A {
}
A2.xxx = function() { return "A2.xxx()"; }

class Ax(p) extends A {
	this.p = p;
	member aaa() { this.system.log("Ax.aaa() - " + this.p); }
}

class Ax2 extends Ax("default") {
}

class Ax3(p) extends Ax(p) {}

class A3(p, q, r) extends A{
	this.p=p; this.q=q; this.r=r;
	member aaa() { this.system.log("A3.aaa()-" + this.p + "-" + this.q + "-" + this.r); }
}

class A3x(p, r) extends A3(p, "qqq", r) {
}

/*
class AB extends A, B {}

class C {
	member system = new System();
	member ccc() { this.system.log("C.ccc()"); }
}

class ABC extends A, B, C {}
*/

main class Main {
	new {

		console.log(A.name);

		var a2 = new A2();
		a2.aaa();
		var ax = new Ax("ppp");
		ax.aaa();
		var ax2 = new Ax2();
		ax2.aaa();

		var a3 = new A3("ppp", "qqq", "rrr");
		a3.aaa();

		var a3x = new A3x("ppp", "qqq", "rrr");
		a3x.aaa();

		A.abc();
		console.log(A.xxx());
		console.log(A2.xxx());

		/*
		var ab = new AB();
		ab.aaa();
		ab.bbb();

		var abc = new ABC();
		abc.aaa();
		abc.bbb();
		abc.ccc();
		*/
	}
}






























//
